package sn.modeltech.banky.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContratAbonnementCompteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAbonnementCompteAllPropertiesEquals(ContratAbonnementCompte expected, ContratAbonnementCompte actual) {
        assertContratAbonnementCompteAutoGeneratedPropertiesEquals(expected, actual);
        assertContratAbonnementCompteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAbonnementCompteAllUpdatablePropertiesEquals(
        ContratAbonnementCompte expected,
        ContratAbonnementCompte actual
    ) {
        assertContratAbonnementCompteUpdatableFieldsEquals(expected, actual);
        assertContratAbonnementCompteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAbonnementCompteAutoGeneratedPropertiesEquals(
        ContratAbonnementCompte expected,
        ContratAbonnementCompte actual
    ) {
        assertThat(expected)
            .as("Verify ContratAbonnementCompte auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAbonnementCompteUpdatableFieldsEquals(
        ContratAbonnementCompte expected,
        ContratAbonnementCompte actual
    ) {
        assertThat(expected)
            .as("Verify ContratAbonnementCompte relevant properties")
            .satisfies(e -> assertThat(e.getIdContrat()).as("check idContrat").isEqualTo(actual.getIdContrat()))
            .satisfies(e -> assertThat(e.getIdAbonne()).as("check idAbonne").isEqualTo(actual.getIdAbonne()))
            .satisfies(e -> assertThat(e.getIdCompteBancaire()).as("check idCompteBancaire").isEqualTo(actual.getIdCompteBancaire()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContratAbonnementCompteUpdatableRelationshipsEquals(
        ContratAbonnementCompte expected,
        ContratAbonnementCompte actual
    ) {
        assertThat(expected)
            .as("Verify ContratAbonnementCompte relationships")
            .satisfies(e -> assertThat(e.getContrat()).as("check contrat").isEqualTo(actual.getContrat()))
            .satisfies(e -> assertThat(e.getAbonne()).as("check abonne").isEqualTo(actual.getAbonne()))
            .satisfies(e -> assertThat(e.getCompteBancaire()).as("check compteBancaire").isEqualTo(actual.getCompteBancaire()));
    }
}
