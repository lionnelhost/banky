package sn.modeltech.banky.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AbonneAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonneAllPropertiesEquals(Abonne expected, Abonne actual) {
        assertAbonneAutoGeneratedPropertiesEquals(expected, actual);
        assertAbonneAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonneAllUpdatablePropertiesEquals(Abonne expected, Abonne actual) {
        assertAbonneUpdatableFieldsEquals(expected, actual);
        assertAbonneUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonneAutoGeneratedPropertiesEquals(Abonne expected, Abonne actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonneUpdatableFieldsEquals(Abonne expected, Abonne actual) {
        assertThat(expected)
            .as("Verify Abonne relevant properties")
            .satisfies(e -> assertThat(e.getIdAbonne()).as("check idAbonne").isEqualTo(actual.getIdAbonne()))
            .satisfies(e -> assertThat(e.getIndiceClient()).as("check indiceClient").isEqualTo(actual.getIndiceClient()))
            .satisfies(e -> assertThat(e.getNomAbonne()).as("check nomAbonne").isEqualTo(actual.getNomAbonne()))
            .satisfies(e -> assertThat(e.getPrenomAbonne()).as("check prenomAbonne").isEqualTo(actual.getPrenomAbonne()))
            .satisfies(e -> assertThat(e.getTelephone()).as("check telephone").isEqualTo(actual.getTelephone()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getTypePieceIdentite()).as("check typePieceIdentite").isEqualTo(actual.getTypePieceIdentite()))
            .satisfies(e -> assertThat(e.getNumPieceIdentite()).as("check numPieceIdentite").isEqualTo(actual.getNumPieceIdentite()))
            .satisfies(e -> assertThat(e.getStatut()).as("check statut").isEqualTo(actual.getStatut()))
            .satisfies(e -> assertThat(e.getIdentifiant()).as("check identifiant").isEqualTo(actual.getIdentifiant()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbonneUpdatableRelationshipsEquals(Abonne expected, Abonne actual) {
        // empty method
    }
}
