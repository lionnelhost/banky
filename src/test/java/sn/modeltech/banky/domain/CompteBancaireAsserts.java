package sn.modeltech.banky.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CompteBancaireAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteBancaireAllPropertiesEquals(CompteBancaire expected, CompteBancaire actual) {
        assertCompteBancaireAutoGeneratedPropertiesEquals(expected, actual);
        assertCompteBancaireAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteBancaireAllUpdatablePropertiesEquals(CompteBancaire expected, CompteBancaire actual) {
        assertCompteBancaireUpdatableFieldsEquals(expected, actual);
        assertCompteBancaireUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteBancaireAutoGeneratedPropertiesEquals(CompteBancaire expected, CompteBancaire actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteBancaireUpdatableFieldsEquals(CompteBancaire expected, CompteBancaire actual) {
        assertThat(expected)
            .as("Verify CompteBancaire relevant properties")
            .satisfies(e -> assertThat(e.getIdCompteBancaire()).as("check idCompteBancaire").isEqualTo(actual.getIdCompteBancaire()))
            .satisfies(e -> assertThat(e.getAge()).as("check age").isEqualTo(actual.getAge()))
            .satisfies(e -> assertThat(e.getNcp()).as("check ncp").isEqualTo(actual.getNcp()))
            .satisfies(e -> assertThat(e.getSde()).as("check sde").isEqualTo(actual.getSde()))
            .satisfies(e -> assertThat(e.getSin()).as("check sin").isEqualTo(actual.getSin()))
            .satisfies(e -> assertThat(e.getSoldeDisponible()).as("check soldeDisponible").isEqualTo(actual.getSoldeDisponible()))
            .satisfies(e -> assertThat(e.getRib()).as("check rib").isEqualTo(actual.getRib()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteBancaireUpdatableRelationshipsEquals(CompteBancaire expected, CompteBancaire actual) {
        assertThat(expected)
            .as("Verify CompteBancaire relationships")
            .satisfies(e -> assertThat(e.getContrat()).as("check contrat").isEqualTo(actual.getContrat()));
    }
}
