package sn.modeltech.banky.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BanqueAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBanqueAllPropertiesEquals(Banque expected, Banque actual) {
        assertBanqueAutoGeneratedPropertiesEquals(expected, actual);
        assertBanqueAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBanqueAllUpdatablePropertiesEquals(Banque expected, Banque actual) {
        assertBanqueUpdatableFieldsEquals(expected, actual);
        assertBanqueUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBanqueAutoGeneratedPropertiesEquals(Banque expected, Banque actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBanqueUpdatableFieldsEquals(Banque expected, Banque actual) {
        assertThat(expected)
            .as("Verify Banque relevant properties")
            .satisfies(e -> assertThat(e.getIdBanque()).as("check idBanque").isEqualTo(actual.getIdBanque()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDevise()).as("check devise").isEqualTo(actual.getDevise()))
            .satisfies(e -> assertThat(e.getLangue()).as("check langue").isEqualTo(actual.getLangue()))
            .satisfies(e -> assertThat(e.getLogo()).as("check logo").isEqualTo(actual.getLogo()))
            .satisfies(e -> assertThat(e.getCodeSwift()).as("check codeSwift").isEqualTo(actual.getCodeSwift()))
            .satisfies(e -> assertThat(e.getCodeIban()).as("check codeIban").isEqualTo(actual.getCodeIban()))
            .satisfies(e -> assertThat(e.getCodePays()).as("check codePays").isEqualTo(actual.getCodePays()))
            .satisfies(e -> assertThat(e.getFuseauHoraire()).as("check fuseauHoraire").isEqualTo(actual.getFuseauHoraire()))
            .satisfies(e -> assertThat(e.getCutOffTime()).as("check cutOffTime").isEqualTo(actual.getCutOffTime()))
            .satisfies(e -> assertThat(e.getCodeParticipant()).as("check codeParticipant").isEqualTo(actual.getCodeParticipant()))
            .satisfies(e -> assertThat(e.getLibelleParticipant()).as("check libelleParticipant").isEqualTo(actual.getLibelleParticipant()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBanqueUpdatableRelationshipsEquals(Banque expected, Banque actual) {
        // empty method
    }
}
