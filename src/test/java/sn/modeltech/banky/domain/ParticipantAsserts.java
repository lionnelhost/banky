package sn.modeltech.banky.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParticipantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParticipantAllPropertiesEquals(Participant expected, Participant actual) {
        assertParticipantAutoGeneratedPropertiesEquals(expected, actual);
        assertParticipantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParticipantAllUpdatablePropertiesEquals(Participant expected, Participant actual) {
        assertParticipantUpdatableFieldsEquals(expected, actual);
        assertParticipantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParticipantAutoGeneratedPropertiesEquals(Participant expected, Participant actual) {
        // empty method
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParticipantUpdatableFieldsEquals(Participant expected, Participant actual) {
        assertThat(expected)
            .as("Verify Participant relevant properties")
            .satisfies(e -> assertThat(e.getIdParticipant()).as("check idParticipant").isEqualTo(actual.getIdParticipant()))
            .satisfies(e -> assertThat(e.getCodeParticipant()).as("check codeParticipant").isEqualTo(actual.getCodeParticipant()))
            .satisfies(e -> assertThat(e.getCodeBanque()).as("check codeBanque").isEqualTo(actual.getCodeBanque()))
            .satisfies(e -> assertThat(e.getNomBanque()).as("check nomBanque").isEqualTo(actual.getNomBanque()))
            .satisfies(e -> assertThat(e.getLibelle()).as("check libelle").isEqualTo(actual.getLibelle()))
            .satisfies(e -> assertThat(e.getPays()).as("check pays").isEqualTo(actual.getPays()))
            .satisfies(e -> assertThat(e.getIsActif()).as("check isActif").isEqualTo(actual.getIsActif()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParticipantUpdatableRelationshipsEquals(Participant expected, Participant actual) {
        // empty method
    }
}
